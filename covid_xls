#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::JSON qw(decode_json);
use Mojo::UserAgent;
use Mojo::File;

use DateTime;
use Readonly;
use Encode qw(decode encode);
use URI::Escape;
use autodie;

use lib 'lib';
use Mojo::Base 'XlsChart';
use Schema;


use Data::Dumper;

plugin 'RenderFile';
plugin AssetPack => { pipes => [qw(Vuejs JavaScript Css)] };
plugin 'TagHelpers';

plugin Minion => { SQLite => 'sqlite:minion.db', };

plugin 'Minion::Admin', { route => app->routes->any('/'), };

Readonly::Hash my %config => (
  url   => 'http://exfidefortis.net/apps/covid?county=%s',
  sheet => 'covid',
  chart => {
    xls_name    => 'covid.xlsx',
    y_axis_name => 'date',
    x_axis_name => 'no of cases',
    title       => 'covid Cluj county',
    height      => 576,
    width       => 720,
  },
);

my $app_config = plugin 'Config' => { file => 'myapp.conf' };

app->asset->process(
  'app.css' => qw(
    https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css
    /css/bootstrap.css
    ),
);

app->asset->process(
  "app.js" => qw(
    https://cdn.jsdelivr.net/npm/vue/dist/vue.js
    /js/component.js
    ),
);

app->asset->process(
  "axios.js" => qw(
    https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.js
    ),
);

helper mojo_file => sub { Mojo::File->new(); };
helper date      => sub { DateTime->now()->date(); };
helper ua        => sub { Mojo::UserAgent->new(); };
helper xls_chart => sub { XlsChart->new( config => $config{chart} ); };
helper schema    => sub {
  Schema->connect(
    $app_config->{db}->{dns},
    $app_config->{db}->{user},
    $app_config->{db}->{password},
    { RaiseError => 1, PrintError => 0, AutoCommit => 1 }
  );
};

helper fetch_curent_day_data => sub {
  my ( $self, $date, $county ) = @_;

  my $result_set = $self->schema()->resultset('County')->search(
    { 'cases.record_date' => $date, abbreviation => uc $county },
    {
      join      => 'cases',
      '+select' => ['cases.record_date'],
      '+as'     => ['record_date']
    }
  );

  my $row = {};
  while ( my $result = $result_set->next() ) {
    $row->{county_id}   = $result->get_column('id');
    $row->{record_date} = $result->get_column('record_date');

  }

  return $row;
};

helper get_new_data => sub {
  my ( $self, $current_data, $county ) = @_;

  unless ( $current_data->{record_date} ) {
    print "Fetching fresh json data\n";
    my $county_id_rs =
      $self->schema->resultset('County')
      ->search( { abbreviation => uc $county } );

    my $county_id;
    my $county_name;

    while ( my $result = $county_id_rs->next() ) {
      $county_id   = $result->get_column('id');
      $county_name = $result->get_column('name');
    }

    my $tx = $self->ua()->get( sprintf( $config{'url'}, uri_escape( $county_name ) ) );

    unless ( $tx->result->is_success ) {
      die 'Could not make request';
    }
    my $res = decode_json( $tx->result()->body() );

    my $data_set = $res->{adjusted_delta_counts_by_date};
    foreach my $date ( sort { $a cmp $b } keys %{$data_set} ) {
      $self->schema()->resultset('Case')->update_or_create(
        {
          county_id   => $county_id,
          cases       => $data_set->{$date},
          record_date => $date,
        },
      );
    }
  }
};

app->minion->add_task(
  new_data => sub {
    my $minion = shift;

    $minion->app->get_new_data(@_);
  }
);
helper new_data => sub { shift->minion->enqueue( new_data => [@_] ) };

get '/api/v1/download/covid/:county' => sub {
  my $c = shift;

  my $xls_object = $c->xls_chart();
  $xls_object->aoa( $c->session('xls_data') );
  my $chart_name = "cases_in_" . $c->stash('county');
  $xls_object->write_chart($chart_name);

  $c->render_file( 'filepath' => $config{chart}->{'xls_name'} );
};

get '/covid/chart/:county' => sub {
  my $c = shift;

  $c->render( template => 'index' );
};

post '/covid/chart/:county' => sub {
  my $c = shift;

  my $county = $c->stash('county');
  my $date   = $c->date();
  my $row    = $c->fetch_curent_day_data( $date, $county );
  $c->new_data( $row, $county );
  #$c->get_new_data($row, $county);
  my $start_date = $c->param('start_date') // '';
  my $end_date   = $c->param('end_date')   // '';

  my $county_id;
  if ($county) {
    my $county_rs =
      $c->schema->resultset('County')->search( { abbreviation => uc $county } );
    while ( my $result = $county_rs->next() ) {
      $county_id = $result->get_column('id');
    }
  }

  if ( !$start_date && !$end_date ) {
    my $min_max_rs = $c->schema()->resultset('Case')->search(
      { county_id => $county_id },
      {
        columns => [
          { min_date => { min => "record_date" } },
          { max_date => { max => "record_date" } },
        ]
      }
    );

    while ( my $result = $min_max_rs->next() ) {
      $end_date   = $result->get_column('max_date');
      $start_date = $result->get_column('min_date');
    }
  }

  my @data           = ();
  my $processed_data = {};
  
  if ( $start_date && $end_date ) {
    @data = $c->schema()->resultset('Case')->search(
      {
        county_id   => $county_id,
        record_date => { '-between' => [ $start_date, $end_date ] }
      }
    );
    @data =
      map { { date => $_->record_date->date(), cases => $_->cases, } } @data;

    my $categories = [];
    my $values     = [];

    foreach my $row (@data) {
      push @{$categories}, $row->{date};
      push @{$values},     $row->{cases};
      $processed_data->{adjusted_delta_counts_by_date} =
        [ $categories, $values ];
    }

    my $active_counties_rs =
      $c->schema->resultset('County')->search( { status => 1 } );

    my $counties_dropdown = [];
    while ( my $result = $active_counties_rs->next() ) {
      push @{$counties_dropdown},
        {
        name         => decode('utf8', $result->get_column('name') ),
        abbreviation => $result->get_column('abbreviation')
        };
    }

    my @xls_data = @{ $processed_data->{adjusted_delta_counts_by_date} };

    $c->session( xls_data => \@xls_data );

    push @{ $processed_data->{adjusted_delta_counts_by_date} },
      $counties_dropdown;
  }

  $c->render( json => $processed_data->{adjusted_delta_counts_by_date} );
};

app->start;

__DATA__
@@ /css/bootstrap.css
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">
  <title>Bare - Start Bootstrap Template123</title>

@@ /js/component.js

function _setGraphColor( color, data ) {
    let $colors = [];
    for ( var i = 0 ; i < data.length; i++ ) {
      $colors.push(color);
    }

    return $colors;
};
var myChart;

var app = new Vue({
  el: "#app",
  data() {
    return {
      labels :'',
      data : '',
      start_date : '',
      end_date : '',
      county: '',
      selected:'',
      options:'',
    };
  },

  async mounted() {
    let county = document.getElementById('myCounty').innerHTML;
    county = county.toUpperCase();
    let response = await axios.post(`/covid/chart/${county}`);
    this.labels = response?.data?.[0];
    this.data = response?.data?.[1];
    this.options = response?.data?.[2];
    this.selected = county;
  },
  methods: {

    renderChart ( labels, data ) {
    let $labels = labels;
    let $data = data;
    let $backgroundColor = _setGraphColor('rgba(54,73,93,.5)', $data );
    var ctx = document.getElementById('myChart').getContext('2d');

    if ( myChart ) {
      myChart.destroy();
    }
    
    myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: $labels,
        datasets: [{
            label: '# covid cases',
            data: $data,
            backgroundColor: $backgroundColor,
            borderColor: _setGraphColor('#36495d', $data ),
            borderWidth: 3
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
    },
    async formSubmit (e) {
      e.preventDefault();
      let a = this.start_date;
      let county = this.selected;
      const params = new URLSearchParams();
      params.append('start_date', this.start_date );
      params.append('end_date', this.end_date );
      let response = await axios({
      url: "/covid/chart/" + county,
      method : 'post',
      data : params
      });

      this.labels = response?.data?.[0];
      this.data = response?.data?.[1];
      this.options = response?.data?.[2];
      this.selected = county;
    },
  },
})

@@ index.html.ep
% layout 'default';

@@ layouts/default.html.ep
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
  %= asset "app.css"

  

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
  <script src="https://unpkg.com/vue-chartjs/dist/vue-chartjs.min.js"></script>
</head>

<body>

  <!-- Navigation -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark static-top">
    <div class="container">
      <a class="navbar-brand" href="#">Covid Cases</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarResponsive">
        <ul class="navbar-nav ml-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/api/v1/download/covid/<%=$county%>">Covid xls
              <span class="sr-only">(current)</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Page Content -->



<!-- First Half -->
<div id="app">
<div class="container">
  <div class="row">
    <div class="col-sm-10">
         <p v-html="renderChart( labels, data )"></p>
          <canvas id="myChart" width="400" height="400"></canvas> 

      <div class="alert alert-info">
        <strong>Info!</strong> We are trying to fetch the newest data for you. 
        Please refresh the page after a few seconds.
    </div>
    </div>
    
    <div class="col-sm-2" style="background-color:pink;">

       <form method="post" @submit="formSubmit">
          <strong>start date:</strong>
          <input type="date" id="start_date" name="start_date" v-model="start_date">

          <strong>end date:</strong>
          <input type="date" id="end_date" name="end_date" v-model="end_date">
          <br>
          <strong> Select county</strong>
          <select class="form-control" v-model="selected">
            <option v-for="option in options" v-bind:value="option.abbreviation">
            {{ option.name }}
            </option>
          </select> 
          <br>
          <button class="btn btn-success">Search</button>
      </form>
    </div>
  </div>
</div>
</div>
<p id='myCounty' class="invisible"><%= $county %></p>
  <!-- Bootstrap core JavaScript -->

%= asset 'axios.js'
%= asset 'app.js', type => 'module'
</body>

</html>
